name: CI/CD Pipeline

on:
  push:
  pull_request:
    branches:
      - master
  release:
    types: [published]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage
          pip install .

      - name: Run Tests
        run: make test

      - name: Run Coverage
        run: make coverage

  build:
    name: Build Library & Docker Image
    needs: test
    #if: github.event_name == 'pull_request' && github.base_ref == 'master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch Tags
        run: git fetch --tags --prune --unshallow

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build Python Library
        run: make build/library

      - name: Build Docker Image
        run: make build/image

      - name: Upload Python Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/*.tar.gz

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: .

  publish:
    name: Publish to PyPI & GitHub Packages
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Twine
        run: pip install twine

      - name: Download Python Package Artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Publish Python Package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build & Push Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/fastapi_aws:latest -t ghcr.io/${{ github.repository_owner }}/fastapi_aws:${{ github.ref_name }} -f Dockerfile .
          docker push ghcr.io/${{ github.repository_owner }}/fastapi_aws:latest
          docker push ghcr.io/${{ github.repository_owner }}/fastapi_aws:${{ github.ref_name }}
